# RV32 Bitmanip Extension
imm2024: op2024 is op2024 {local tmp:$(XLEN) = op2024; export tmp;}
imm2025: op2025 is op2025 {local tmp:$(XLEN) = op2025; export tmp;}
imm2026: op2026 is op2026 {local tmp:$(XLEN) = op2026; export tmp;}

define pcodeop add_uw;
define pcodeop zext_w;
:zext.w rd, rs1      is op0006=0x3b & op1214=0x0 & op1519=0x0 & op2531=0x04 & rd & rs1       {rd=zext_w(rs1);}
:add.uw rd, rs1, rs2 is op0006=0x3b & op1214=0x0              & op2531=0x04 & rd & rs1 & rs2 {rd=add_uw(rs1,rs2);}

define pcodeop andn;
:andn rd, rs1, rs2 is op0006=0x33 & op1214=0x7 & op2531=0x20 & rd & rs1 & rs2 {rd=andn(rs1,rs2);}

# TODO: unaproved
#define pcodeop bdep;
#:bdep rd, rs1, rs2 is op0006=0x33 & op1214=0x6 & op2531=0x24 & rd & rs1 & rs2 {rd=bdep(rs1,rs2);}
#

define pcodeop bext;
:bext rd, rs1, rs2 is op0006=0x33 & op1214=0x5 & op2531=0x24 & rd & rs1 & rs2 {rd=bext(rs1,rs2);}

# TODO: unaproved
#define pcodeop bfp;
#:bfp rd, rs1, rs2 is op0006=0x33 & op1214=0x7 & op2531=0x24 & rd & rs1 & rs2 {rd=bfp(rs1,rs2);}

define pcodeop clmul;
:clmul  rd, rs1, rs2 is op0006=0x33 & op1214=0x1 & op2531=0x5 & rd & rs1 & rs2 {rd=clmul(rs1,rs2);}

define pcodeop clmulh;
:clmulh rd, rs1, rs2 is op0006=0x33 & op1214=0x3 & op2531=0x5 & rd & rs1 & rs2 {rd=clmulh(rs1,rs2);}

define pcodeop clmulr;
:clmulr rd, rs1, rs2 is op0006=0x33 & op1214=0x2 & op2531=0x5 & rd & rs1 & rs2 {rd=clmulr(rs1,rs2);}

define pcodeop clz;
:clz rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x0 & op2531=0x30 & rd & rs1 {rd=clz(rs1);}

define pcodeop clzw;
:clzw rd, rs1 is op0006=0x1b & op1214=0x1 & op2024=0x0 & op2531=0x30 & rd & rs1 {rd=clzw(rs1);}

# TODO: unaproved
#define pcodeop cmix;
#:cmix rd, rs2, rs1, rs3 is op0006=0x33 & op1214=0x1 & op2526=0x3 & rd & rs1 & rs2 & rs3 {rd=cmix(rs2,rs1,rs3);}

# TODO: unaproved
#define pcodeop cmov;
#:cmov rd, rs2, rs1, rs3 is op0006=0x33 & op1214=0x5 & op2526=0x3 & rd & rs1 & rs2 & rs3 {rd=cmov(rs2,rs1,rs3);}

# TODO: unaproved
#define pcodeop crc32_b;
#:crc32.b rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x10 & op2531=0x30 & rd & rs1 {rd=crc32_b(rs1);}

# TODO: unaproved
#define pcodeop crc32_h;
#:crc32.h rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x11 & op2531=0x30 & rd & rs1 {rd=crc32_h(rs1);}

# TODO: unaproved
#define pcodeop crc32_w;
#:crc32.w rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x12 & op2531=0x30 & rd & rs1 {rd=crc32_w(rs1);}

# TODO: unaproved
#define pcodeop crc32c_b;
#:crc32c.b rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x18 & op2531=0x30 & rd & rs1 {rd=crc32c_b(rs1);}

# TODO: unaproved
#define pcodeop crc32c_h;
#:crc32c.h rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x19 & op2531=0x30 & rd & rs1 {rd=crc32c_h(rs1);}

# TODO: unaproved
define pcodeop crc32c_w;
#:crc32c.w rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x1a & op2531=0x30 & rd & rs1 {rd=crc32c_w(rs1);}

define pcodeop ctz;
:ctz rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x1 & op2531=0x30 & rd & rs1 {rd=ctz(rs1);}

define pcodeop ctzw;
:ctzw rd, rs1 is op0006=0x1b & op1214=0x1 & op2024=0x1 & op2531=0x30 & rd & rs1 {rd=ctzw(rs1);}

# TODO: unaproved
#define pcodeop fsl;
#:fsl  rd, rs1, rs3, rs2 is op0006=0x33 & op1214=0x1 & op2526=0x2 & rd & rs1 & rs2 & rs3 {rd=fsl(rs1,rs3,rs2);}

# TODO: unaproved
#define pcodeop fsr;
#:fsr  rd, rs1, rs3, rs2 is op0006=0x33 & op1214=0x5 & op2526=0x2 & rd & rs1 & rs2 & rs3 {rd=fsr(rs1,rs3,rs2);}

# TODO: unaproved
#define pcodeop fsri;
#:fsri rd, rs1, rs3, imm2025 is op0006=0x33 & op1214=0x5 & op2626=0x1 & imm2025 & rd & rs1 & rs3 {rd=fsri(rs1,rs3,imm2025);}

define pcodeop orc_b;
:orc.b rd, rs1 is op0006=0x13 & rd & op1214=0x5 & rs1 & op2025=0x07 & op2631=0x0a {rd=orc_b(rs1);}

# TODO: unaproved
#define pcodeop grev;
#:grev  rd, rs1, rs2 is op0006=0x33 & op1214=0x5 & op2531=0x34 & rd & rs1 & rs2 {rd=grev(rs1,rs2);}

define pcodeop rev8;
define pcodeop rev_b;
#define pcodeop grevi;
#                   rev8 has different encodings for 32 and 64 bit CPUs
:rev.b rd, rs1         is op0006=0x13 & op1214=0x5 & op2731=0xd & op2026=0x7  & rd & rs1 {rd=rev_b(rs1);}
:rev8  rd, rs1         is op0006=0x13 & op1214=0x5 & op2731=0xd & op2026=0x18 & rd & rs1 {rd=rev8(rs1);}
:rev8  rd, rs1         is op0006=0x13 & op1214=0x5 & op2731=0xd & op2026=0x38 & rd & rs1 {rd=rev8(rs1);}
# :grevi rd, rs1, imm2026 is op0006=0x13 & op1214=0x5 & op2731=0xd & imm2026      & rd & rs1 {rd=grevi(rs1,imm2026);}

define pcodeop minu;
:minu  rd, rs1, rs2 is op0006=0x33 & op1214=0x5 & op2531=0x5 & rd & rs1 & rs2 {rd=minu(rs1,rs2);}

define pcodeop maxu;
:maxu rd, rs1, rs2 is op0006=0x33 & op1214=0x7 & op2531=0x5 & rd & rs1 & rs2 {rd=maxu(rs1,rs2);}

define pcodeop min;
:min  rd, rs1, rs2 is op0006=0x33 & op1214=0x4 & op2531=0x5 & rd & rs1 & rs2 {rd=min(rs1,rs2);}

define pcodeop max;
:max rd, rs1, rs2 is op0006=0x33 & op1214=0x6 & op2531=0x5 & rd & rs1 & rs2 {rd=max(rs1,rs2);}

define pcodeop orn;
:orn  rd, rs1, rs2 is op0006=0x33 & op1214=0x6 & op2531=0x20 & rd & rs1 & rs2 {rd=orn(rs1,rs2);}

define pcodeop pack;
:pack  rd, rs1, rs2 is op0006=0x33 & op1214=0x4 & op2531=0x4 & rd & rs1 & rs2 {rd=pack(rs1,rs2);}

define pcodeop packh;
:packh rd, rs1, rs2 is op0006=0x33 & op1214=0x7 & op2531=0x4 & rd & rs1 & rs2 {rd=packh(rs1,rs2);}

#TODO: remove unaproved code
#define pcodeop packu;
#:packu rd, rs1, rs2 is op0006=0x33 & op1214=0x4 & op2531=0x24 & rd & rs1 & rs2 {rd=packu(rs1,rs2);}

define pcodeop packw;
:packw rd, rs1, rs2 is op0006=0x3b & op1214=0x4 & op2531=0x04 & rd & rs1 & rs2 {rd=packw(rs1,rs2);}

define pcodeop zext_h;
:zext.h rd, rs2 is op0006=0x3b & op1214=0x4 & op2531=0x04 & rd & op2024=0 & rs2 {rd=zext_h(rs2);}

define pcodeop cpop;
:cpop rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x2 & op2531=0x30 & rd & rs1 {rd=cpop(rs1);}

define pcodeop cpopw;
:cpopw rd, rs1 is op0006=0x1b & op1214=0x1 & op2024=0x2 & op2531=0x30 & rd & rs1 {rd=cpopw(rs1);}

define pcodeop rol;
:rol  rd, rs1, rs2 is op0006=0x33 & op1214=0x1 & op2531=0x30 & rd & rs1 & rs2 {rd=rol(rs1,rs2);}

define pcodeop rolw;
:rolw  rd, rs1, rs2 is op0006=0x3b & op1214=0x1 & op2531=0x30 & rd & rs1 & rs2 {rd=rolw(rs1,rs2);}

define pcodeop ror;
:ror  rd, rs1, rs2 is op0006=0x33 & op1214=0x5 & op2531=0x30 & rd & rs1 & rs2 {rd=ror(rs1,rs2);}

define pcodeop rorw;
:rorw  rd, rs1, rs2 is op0006=0x3b & op1214=0x5 & op2531=0x30 & rd & rs1 & rs2 {rd=rorw(rs1,rs2);}

define pcodeop rori;
:rori rd, rs1, imm2026 is op0006=0x13 & op1214=0x5 & op2731=0x0c & imm2026 & rd & rs1 {rd=rori(rs1,imm2026);}

define pcodeop roriw;
:roriw rd, rs1, imm2024 is op0006=0x1b & op1214=0x5 & op2531=0x30 & imm2024 & rd & rs1 {rd=roriw(rs1,imm2024);}

define pcodeop bclr;
:bclr  rd, rs1, rs2 is op0006=0x33 & op1214=0x1 & op2531=0x24 & rd & rs1 & rs2 {rd=bclr(rs1,rs2);}

define pcodeop bclri;
:bclri rd, rs1, imm2026 is op0006=0x13 & op1214=0x1 & op2731=0x9 & imm2026 & rd & rs1 {rd=bclri(rs1,imm2026);}

define pcodeop bexti;
:bexti rd, rs1, imm2026 is op0006=0x13 & op1214=0x5 & op2731=0x9 & imm2026 & rd & rs1 {rd=bexti(rs1,imm2026);}

define pcodeop binv;
:binv  rd, rs1, rs2 is op0006=0x33 & op1214=0x1 & op2531=0x34 & rd & rs1 & rs2 {rd=binv(rs1,rs2);}

define pcodeop binvi;
:binvi rd, rs1, imm2026 is op0006=0x13 & op1214=0x1 & op2731=0xd & imm2026 & rd & rs1 {rd=binvi(rs1,imm2026);}

define pcodeop bset;
:bset  rd, rs1, rs2 is op0006=0x33 & op1214=0x1 & op2531=0x14 & rd & rs1 & rs2 {rd=bset(rs1,rs2);}

define pcodeop bseti;
:bseti rd, rs1, imm2026 is op0006=0x13 & op1214=0x1 & op2731=0x5 & imm2026 & rd & rs1 {rd=bseti(rs1,imm2026);}

define pcodeop sext_b;
:sext.b rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x4 & op2531=0x30 & rd & rs1 {rd=sext_b(rs1);}

define pcodeop sext_h;
:sext.h rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x5 & op2531=0x30 & rd & rs1 {rd=sext_h(rs1);}

define pcodeop sh1add;
:sh1add rd, rs1, rs2 is op0006=0x33 & op1214=0x2 & op2531=0x10 & rd & rs1 & rs2 {rd=sh1add(rs1,rs2);}

define pcodeop sh1add_uw;
:sh1add.uw rd, rs1, rs2 is op0006=0x3b & op1214=0x2 & op2531=0x10 & rd & rs1 & rs2 {rd=sh1add_uw(rs1,rs2);}

:sh2add rd, rs1, rs2 is op0006=0x33 & op1214=0x4 & op2531=0x10 & rd & rs1 & rs2 {rd=(rs1<<2)+rs2;}

define pcodeop sh2add_uw;
:sh2add.uw rd, rs1, rs2 is op0006=0x3b & op1214=0x4 & op2531=0x10 & rd & rs1 & rs2 {rd=sh2add_uw(rs1,rs2);}

:sh3add rd, rs1, rs2 is op0006=0x33 & op1214=0x6 & op2531=0x10 & rd & rs1 & rs2 {rd=(rs1<<3)+rs2;}

define pcodeop sh3add_uw;
:sh3add.uw rd, rs1, rs2 is op0006=0x3b & op1214=0x6 & op2531=0x10 & rd & rs1 & rs2 {rd=sh3add_uw(rs1,rs2);}

define pcodeop slli_uw;
:slli.uw rd, rs1, imm2025 is op0006=0x1b & op1214=0x1 & op2631=0x2 & imm2025 & rd & rs1 {rd=slli_uw(rs1,imm2025);}

# TODO: unaproved
#define pcodeop slo;
#:slo  rd, rs1, rs2 is op0006=0x33 & op1214=0x1 & op2531=0x10 & rd & rs1 & rs2 {rd=slo(rs1,rs2);}

# TODO: unaproved
#define pcodeop sloi;
#:sloi rd, rs1, imm2026 is op0006=0x13 & op1214=0x1 & op2731=0x4 & imm2026 & rd & rs1 {rd=sloi(rs1,imm2026);}

# TODO: unaproved
#define pcodeop sro;
#:sro  rd, rs1, rs2 is op0006=0x33 & op1214=0x5 & op2531=0x10 & rd & rs1 & rs2 {rd=sro(rs1,rs2);}

# TODO: unaproved
#define pcodeop sroi;
#:sroi rd, rs1, imm2026 is op0006=0x13 & op1214=0x5 & op2731=0x4 & imm2026 & rd & rs1 {rd=sroi(rs1,imm2026);}

# TODO: unaproved
#define pcodeop unshfl;
#:unshfl  rd, rs1, rs2 is op0006=0x33 & op1214=0x5 & op2531=0x4 & rd & rs1 & rs2 {rd=unshfl(rs1,rs2);}

# TODO: unaproved
#define pcodeop unshfli;
#:unshfli rd, rs1, imm2025 is op0006=0x13 & op1214=0x5 & op2631=0x2 & imm2025 & rd & rs1 {rd=unshfli(rs1,imm2025);}

define pcodeop xnor;
:xnor rd, rs1, rs2 is op0006=0x33 & op1214=0x4 & op2531=0x20 & rd & rs1 & rs2 {rd=xnor(rs1,rs2);}

define pcodeop unzip;
:unzip rd, rs1 is op0006=0x13 & op1214=0x5 & op2024=0x1f & rd & rs1 & op2531=0x04 {rd=unzip(rs1);}

define pcodeop zip;
:zip rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x1e & rd & rs1 & op2531=0x04 {rd=zip(rs1);}

define pcodeop xperm_b;
:xperm.b rd, rs1, rs2 is op0006=0x33 & rd & op1214=0x4 & rs1 & rs2 & op2531=0x14 {rd=xperm_b(rs1,rs2);}

define pcodeop xperm_n;
:xperm.nf rd, rs1, rs2 is op0006=0x33 & rd & op1214=0x2 & rs1 & rs2 & op2531=0x14 {rd=xperm_n(rs1,rs2);}