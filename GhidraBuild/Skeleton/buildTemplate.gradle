// Builds a Ghidra Extension for a given Ghidra installation.
//
// An absolute path to the Ghidra installation directory must be supplied either by setting the 
// GHIDRA_INSTALL_DIR environment variable or Gradle project property:
//
//     > export GHIDRA_INSTALL_DIR=<Absolute path to Ghidra> 
//     > gradle
//
//         or
//
//     > gradle -PGHIDRA_INSTALL_DIR=<Absolute path to Ghidra>
//
// Gradle should be invoked from the directory of the project to build.  Please see the
// application.gradle.version property in <GHIDRA_INSTALL_DIR>/Ghidra/application.properties
// for the correction version of Gradle to use for the Ghidra installation you specify.

//----------------------START "DO NOT MODIFY" SECTION------------------------------
def ghidraInstallDir

if (System.env.GHIDRA_INSTALL_DIR) {
	ghidraInstallDir = System.env.GHIDRA_INSTALL_DIR
}
else if (project.hasProperty("GHIDRA_INSTALL_DIR")) {
	ghidraInstallDir = project.getProperty("GHIDRA_INSTALL_DIR")
}

if (ghidraInstallDir) {
	apply from: new File(ghidraInstallDir).getCanonicalPath() + "/support/buildExtension.gradle"
}
else {
	throw new GradleException("GHIDRA_INSTALL_DIR is not defined!")
}
//----------------------END "DO NOT MODIFY" SECTION-------------------------------

// Include the code below if you want dependency jars to be automatically managed

task copyDependencies(type: Copy) {
	from configurations.default
	into "lib"
	exclude {fileTreeElement ->
		def fileAbsPath = fileTreeElement.getFile().getCanonicalFile().toPath()
		// Avoid including Ghidra Jars in lib folder...
		def isGhidraJar = fileAbsPath.startsWith(ghidraInstallDir)
		// ...and jars already in the destination location
		def destLibDir = project.file("lib").getCanonicalFile().toPath()
		def isFromDest = fileAbsPath.startsWith(destLibDir)
		return isGhidraJar || isFromDest
	}
}

task cleanDependencyJars(type: Delete) {
	delete fileTree("lib").matching {
		include "**/*.jar"
	}
}

tasks.buildExtension.dependsOn(copyDependencies)
tasks.copyDependencies.dependsOn(cleanDependencyJars)
tasks.clean.dependsOn(cleanDependencyJars)
